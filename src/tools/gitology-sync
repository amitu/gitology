#!/usr/bin/python
from django.utils import simplejson
from django.conf.urls.defaults import patterns

import path, sys
from gitology.config import settings

def get_blog_data(p):
    blog = {}
    blog["name"] = p.basename()
    if p.basename() == "main": blog["prefix"] = "blog/"
    else: blog["prefix"] = "%s/" % p.basename()
    # posts
    blog["posts"] = {}
    for y in p.dirs():
        if y.namebase == "labels": continue
        for m in y.dirs():
            for d in m.glob("*.lst"):
                for l in d.open().readlines():
                    blog["posts"][l.strip()] = { 'date': d }
    # labels
    blog["labels"] = []
    for l in p.joinpath("labels").glob("*.lst"):
        d = {}
        d["name"] = l.namebase
        d["posts"] = []
        for l in l.open().readlines():
            d["posts"].append({ l.strip(): blog["posts"][l.strip()]})
        blog["labels"].append(d)
    print blog
    return blog

def get_blog(p):
    urls = []
    b = get_blog_data(p)
    urls.append(("%s$" % b["prefix"], "show_blog", { 'blog_data': b,}))
    for l in b["labels"]:
        urls.append(
            (
                "%slabelled/%s/$" % (b["prefix"], l["name"]), "show_category",
                { 'blog_data': b, 'category_data': l },
            )
        )
    return urls

def get_blogs():
    urls = []
    blogs_folder = settings.LOCAL_REPO_PATH.joinpath("blogs")
    for d in blogs_folder.dirs():
        urls += get_blog(d)
    return urls

def refresh_urlconf_cache():
    """ creates a urlconf that is stored """
    urls = ['gitology.d.views'] 
    # for blog:
    # list of blogs is in $reporoot/blogs/
    # urls: /blog_name/
    # blog named "main" goes under /blog/, rest of them go to /folder_name/
    urls += get_blogs() 

    # for each blog, list of labels in $reporoot/blogs/blog_name/labels/ 
    # urls: /blog_name/label/label_name/
    # for each blog, date based heirarchy is kept in 
    # $reporoot/blogs/blog_name/year/month/date.lst
    # /blog_name/year/month/date/document_name/

    # for wiki:
    # list of wiki document names are in $reporoot/wiki/document_alias.txt
    # urls: /document_alias/
    # further heirarchy is maintained: 
    # $reporoot/wiki/document_alias/child_alias.txt
    # /document_alias/child_alias/ 

    # for notes:
    # notebooks are stored in $reporoot/notebooks/
    # urls: /notebook/ this is a dedicated app 

    # for albums:
    # list of albums are in $reporoot/albums/ album_name.meta, album_name.lst
    # urls: /album|gallery/album_name/ this is document. it can contain select 
    # few photos etc.
    # each photo is basically a document, its list is in the album_name.lst
    # each album photo ll have a thumbnail and caption meta data to be shown 
    # on album page/
    # /album/album_name/photos/ will list all photos, each photo may be in one 
    # or more albums. each photo can be a blog post too in one or more blogs

    # optimization: this info will be loaded from a file, and some other tool
    # is to update this file everytime something interesting happens.

    # this function returns a dict containing url to view mapping.
    file(settings.LOCAL_REPO_PATH.joinpath("urlconf.cache"), "w+").write(
        simplejson.dumps(urls)
    )

if __name__ == "__main__": 
    sys.exit(refresh_urlconf_cache())
